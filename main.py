import requests
from datetime import datetime, date, timedelta
import matplotlib.pyplot as plt
import matplotlib.dates as mdates
from geopy.geocoders import Nominatim
from geopy.exc import GeocoderUnavailable, GeocoderTimedOut
import os
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ API –∫–ª—é—á–∞ –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv()
API_KEY = os.getenv('VISUAL_CROSSING_API_KEY')

if not API_KEY:
    print("‚ö† –û—à–∏–±–∫–∞: –ù–µ –Ω–∞–π–¥–µ–Ω API –∫–ª—é—á Visual Crossing. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env —Å –∫–ª—é—á–æ–º.")
    exit(1)


def get_coordinates(city):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≥–æ—Ä–æ–¥–∞ —á–µ—Ä–µ–∑ Nominatim API.
    –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏—â–µ—Ç –≤ –†–æ—Å—Å–∏–∏, –Ω–æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–µ –≥–æ—Ä–æ–¥–∞.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (—à–∏—Ä–æ—Ç–∞, –¥–æ–ª–≥–æ—Ç–∞) –∏–ª–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –£—Ñ—ã (54.73780, 55.94188) –ø—Ä–∏ –æ—à–∏–±–∫–µ.
    """
    # –ï—Å–ª–∏ –≥–æ—Ä–æ–¥–∞ –Ω–µ—Ç –≤ —Å–ª–æ–≤–∞—Ä–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º API Nominatim
    try:
        geolocator = Nominatim(user_agent="weather_app")
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –∏—Å–∫–∞—Ç—å —Å –ø—Ä–∏–≤—è–∑–∫–æ–π –∫ –†–æ—Å—Å–∏–∏
        location = geolocator.geocode(f"{city}, –†–æ—Å—Å–∏—è", exactly_one=True)
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –†–æ—Å—Å–∏–∏, –∏—â–µ–º –±–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è —Å—Ç—Ä–∞–Ω—ã
        if not location:
            location = geolocator.geocode(city, exactly_one=True)

        if location:
            return location.latitude, location.longitude
        else:
            print(f"‚ö† –ì–æ—Ä–æ–¥ '{city}' –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –£—Ñ—ã.")
            return 54.73780, 55.94188

    except (GeocoderUnavailable, GeocoderTimedOut, requests.exceptions.RequestException) as e:
        print(f"‚ö† –û—à–∏–±–∫–∞ –≥–µ–æ–∫–æ–¥–∏–Ω–≥–∞: {e}. –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –£—Ñ—ã.")
        return 54.73780, 55.94188


def fetch_weather_data(latitude, longitude, start_date, end_date):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ —Å Visual Crossing Weather API"""
    base_url = "https://weather.visualcrossing.com/VisualCrossingWebServices/rest/services/timeline/"

    # –§–æ—Ä–º–∏—Ä—É–µ–º URL –∑–∞–ø—Ä–æ—Å–∞
    location = f"{latitude},{longitude}"
    url = f"{base_url}{location}/{start_date}/{end_date}?unitGroup=metric&include=days&key={API_KEY}&contentType=json"

    try:
        response = requests.get(url)
        response.raise_for_status()
        data = response.json()

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –µ–¥–∏–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
        processed_data = {
            "daily": {
                "time": [],
                "temperature_2m_max": [],
                "temperature_2m_min": []
            }
        }

        for day in data.get('days', []):
            processed_data["daily"]["time"].append(day['datetime'])
            processed_data["daily"]["temperature_2m_max"].append(day['tempmax'])
            processed_data["daily"]["temperature_2m_min"].append(day['tempmin'])

        return processed_data

    except requests.exceptions.RequestException as e:
        print(f"‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ: {e}")
        return None


def plot_weather(data, city):
    """–°—Ç—Ä–æ–∏—Ç –≥—Ä–∞—Ñ–∏–∫ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã —Å –∞–Ω–Ω–æ—Ç–∞—Ü–∏—è–º–∏ –∏ –ª–µ–≥–µ–Ω–¥–æ–π"""
    if not data or "daily" not in data:
        print("‚ö† –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞!")
        return

    dates = [datetime.strptime(d, "%Y-%m-%d").date() for d in data["daily"]["time"]]
    temp_max = data["daily"]["temperature_2m_max"]
    temp_min = data["daily"]["temperature_2m_min"]

    plt.figure(figsize=(12, 6))

    # –ì—Ä–∞—Ñ–∏–∫–∏ —Å –º–∞—Ä–∫–µ—Ä–∞–º–∏
    max_line, = plt.plot(dates, temp_max, label="–ú–∞–∫—Å. —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞", marker="o", color="red", linestyle="-",
                         linewidth=2)
    min_line, = plt.plot(dates, temp_min, label="–ú–∏–Ω. —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞", marker="o", color="blue", linestyle="-",
                         linewidth=2)

    # –ê–Ω–Ω–æ—Ç–∞—Ü–∏–∏ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
    for date_, temp in zip(dates, temp_max):
        plt.annotate(
           f"{temp:.1f}¬∞C",
            (date_, temp),
            textcoords="offset points",
            xytext=(0, 10),
            ha="center",
            fontsize=9,
            color="red",
        )

    # –ê–Ω–Ω–æ—Ç–∞—Ü–∏–∏ –¥–ª—è –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
    for date_, temp in zip(dates, temp_min):
        plt.annotate(
            f"{temp:.1f}¬∞C",
            (date_, temp),
            textcoords="offset points",
            xytext=(0, -15),
            ha="center",
            fontsize=9,
            color="blue",
        )

    # –ó–∞–ª–∏–≤–∫–∞ –º–µ–∂–¥—É –≥—Ä–∞—Ñ–∏–∫–∞–º–∏
    plt.fill_between(dates, temp_min, temp_max, color="lightgray", alpha=0.3, label="–†–∞–∑–Ω–∏—Ü–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä")

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–µ–≥–µ–Ω–¥—ã
    plt.legend(
        handles=[max_line, min_line],
        loc="upper left",
        framealpha=1,
        shadow=True,
        fontsize=10,
    )

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Å–µ–π –∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞
    plt.title(f"–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤ {city.capitalize()} –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π", fontsize=14, pad=20)
    plt.xlabel("–î–∞—Ç–∞", fontsize=12)
    plt.ylabel("–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ (¬∞C)", fontsize=12)
    plt.grid(True, linestyle="--", alpha=0.7)

    # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç
    plt.gca().xaxis.set_major_formatter(mdates.DateFormatter("%d.%m"))
    plt.gca().xaxis.set_major_locator(mdates.DayLocator())
    plt.gcf().autofmt_xdate()

    plt.tight_layout()
    plt.show()


def main():
    print("üå¶Ô∏è –ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø–æ–≥–æ–¥—ã (Visual Crossing Weather)")
    print("------------------------------------------------------")

    city = input("–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ (Enter –¥–ª—è –£—Ñ—ã): ").strip()
    if city == "":
        city = "–£—Ñ–∞"
    date_str = input("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î (Enter –¥–ª—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 7 –¥–Ω–µ–π): ").strip()

    latitude, longitude = get_coordinates(city)

    if date_str:
        # –ü–æ–≥–æ–¥–∞ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –¥–∞—Ç—É
        try:
            #target_date = datetime.strptime(date_str, "%Y-%m-%d").date()
            data = fetch_weather_data(latitude, longitude, date_str, date_str)
            print(f"–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≥–æ—Ä–æ–¥–∞ {city}: {latitude}, {longitude}")

            if data and "daily" in data:
                temp_max = data["daily"]["temperature_2m_max"][0]
                temp_min = data["daily"]["temperature_2m_min"][0]
                print(f"\nüìÖ –ü–æ–≥–æ–¥–∞ –≤ {city.capitalize()} –Ω–∞ {date_str}:")
                print(f"üî• –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp_max}¬∞C")
                print(f"‚ùÑÔ∏è –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp_min}¬∞C")
            else:
                print("–û—à–∏–±–∫–∞: –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —ç—Ç—É –¥–∞—Ç—É.")
        except ValueError:
            print("‚ö† –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã!")
    else:
        # –ü–æ–≥–æ–¥–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π (–≤–∫–ª—é—á–∞—è —Å–µ–≥–æ–¥–Ω—è)
        end_date = date.today()
        start_date = end_date - timedelta(days=6)  # 7 –¥–Ω–µ–π –≤–∫–ª—é—á–∞—è —Å–µ–≥–æ–¥–Ω—è

        data = fetch_weather_data(latitude, longitude, start_date.strftime("%Y-%m-%d"), end_date.strftime("%Y-%m-%d"))

        if data and "daily" in data:
            print(f"–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≥–æ—Ä–æ–¥–∞ {city}: {latitude}, {longitude}")
            plot_weather(data, city)
        else:
            print("–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ.")


if __name__ == "__main__":
    main()