import requests
from datetime import datetime, date, timedelta
# Plot
import matplotlib.pyplot as plt
import matplotlib.dates as mdates
# GEO lib
from geopy.geocoders import Nominatim
from geopy.exc import GeocoderUnavailable, GeocoderTimedOut


def get_coordinates(city):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≥–æ—Ä–æ–¥–∞ —á–µ—Ä–µ–∑ Nominatim API.
    –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏—â–µ—Ç –≤ –†–æ—Å—Å–∏–∏, –Ω–æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–µ –≥–æ—Ä–æ–¥–∞.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (—à–∏—Ä–æ—Ç–∞, –¥–æ–ª–≥–æ—Ç–∞) –∏–ª–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –£—Ñ—ã (54.73780, 55.94188) –ø—Ä–∏ –æ—à–∏–±–∫–µ.
    """
    # –ï—Å–ª–∏ –≥–æ—Ä–æ–¥–∞ –Ω–µ—Ç –≤ —Å–ª–æ–≤–∞—Ä–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º API Nominatim
    try:
        geolocator = Nominatim(user_agent="weather_app")
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –∏—Å–∫–∞—Ç—å —Å –ø—Ä–∏–≤—è–∑–∫–æ–π –∫ –†–æ—Å—Å–∏–∏
        location = geolocator.geocode(f"{city}, –†–æ—Å—Å–∏—è", exactly_one=True)
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –†–æ—Å—Å–∏–∏, –∏—â–µ–º –±–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è —Å—Ç—Ä–∞–Ω—ã
        if not location:
            location = geolocator.geocode(city, exactly_one=True)

        if location:
            return (location.latitude, location.longitude)
        else:
            print(f"‚ö† –ì–æ—Ä–æ–¥ '{city}' –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –£—Ñ—ã.")
            return (54.73780, 55.94188)

    except (GeocoderUnavailable, GeocoderTimedOut, requests.exceptions.RequestException) as e:
        print(f"‚ö† –û—à–∏–±–∫–∞ –≥–µ–æ–∫–æ–¥–∏–Ω–≥–∞: {e}. –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –£—Ñ—ã.")
        return (54.73780, 55.94188)


def fetch_weather_data(latitude, longitude, start_date, end_date):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∞—Ä—Ö–∏–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –∞ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç ‚Äî –ø—Ä–æ–≥–Ω–æ–∑–Ω—ã–µ"""
    # –ó–∞–ø—Ä–æ—Å –∞—Ä—Ö–∏–≤–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    url = "https://archive-api.open-meteo.com/v1/archive"
    params = {
        "latitude": latitude,
        "longitude": longitude,
        "start_date": start_date,
        "end_date": end_date,
        "daily": "temperature_2m_max,temperature_2m_min",
        "timezone": "auto",
    }
    response = requests.get(url, params=params)
    data = response.json()

    # –ï—Å–ª–∏ –∞—Ä—Ö–∏–≤–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∑–∞ –≤—á–µ—Ä–∞/—Å–µ–≥–æ–¥–Ω—è), –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø—Ä–æ–≥–Ω–æ–∑
    if "daily" not in data or any(temp is None for temp in data["daily"]["temperature_2m_max"]):
        forecast_url = "https://api.open-meteo.com/v1/forecast"
        forecast_params = {
            "latitude": latitude,
            "longitude": longitude,
            "daily": "temperature_2m_max,temperature_2m_min",
            "timezone": "auto",
            "forecast_days": 1,  # –¢–æ–ª—å–∫–æ –Ω–∞ 1 –¥–µ–Ω—å –≤–ø–µ—Ä–µ–¥
        }
        forecast_response = requests.get(forecast_url, params=forecast_params)
        forecast_data = forecast_response.json()

        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –∞—Ä—Ö–∏–≤–Ω—ã–µ –∏ –ø—Ä–æ–≥–Ω–æ–∑–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        if "daily" in forecast_data:
            for key in ["temperature_2m_max", "temperature_2m_min"]:
                data["daily"][key][-1] = forecast_data["daily"][key][0]  # –ó–∞–º–µ–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å

    return data


def clean_data(temp_data):
    """–ó–∞–º–µ–Ω—è–µ—Ç None –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ"""
    clean = []
    last_valid = None
    for temp in temp_data:
        if temp is not None:
            clean.append(temp)
            last_valid = temp
        else:
            clean.append(last_valid if last_valid is not None else 0)  # –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö, —Å—Ç–∞–≤–∏–º 0
    return clean


def plot_weather(data, city):
    """–°—Ç—Ä–æ–∏—Ç –≥—Ä–∞—Ñ–∏–∫ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã —Å –∞–Ω–Ω–æ—Ç–∞—Ü–∏—è–º–∏ –∏ –ª–µ–≥–µ–Ω–¥–æ–π"""
    dates = [datetime.strptime(d, "%Y-%m-%d").date() for d in data["daily"]["time"]]
    temp_max = data["daily"]["temperature_2m_max"]
    temp_min = data["daily"]["temperature_2m_min"]

    # –£–±–∏—Ä–∞–µ–º –¥–Ω–∏, –≥–¥–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç (None)
    valid_dates = []
    valid_max = []
    valid_min = []
    for i in range(len(dates)):
        if temp_max[i] is not None and temp_min[i] is not None:
            valid_dates.append(dates[i])
            valid_max.append(temp_max[i])
            valid_min.append(temp_min[i])

    if not valid_dates:
        print("‚ö† –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞!")
        return

    # –î–∞–ª—å—à–µ —Ä–∏—Å—É–µ–º –≥—Ä–∞—Ñ–∏–∫ –∫–∞–∫ –æ–±—ã—á–Ω–æ, –Ω–æ —Å valid_dates, valid_max, valid_min
    plt.figure(figsize=(12, 6))

    # –ì—Ä–∞—Ñ–∏–∫–∏ —Å –º–∞—Ä–∫–µ—Ä–∞–º–∏
    max_line, = plt.plot(dates, temp_max, label="–ú–∞–∫—Å. —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞", marker="o", color="red", linestyle="-",
                         linewidth=2)
    min_line, = plt.plot(dates, temp_min, label="–ú–∏–Ω. —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞", marker="o", color="blue", linestyle="-",
                         linewidth=2)

    # –ê–Ω–Ω–æ—Ç–∞—Ü–∏–∏ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
    for date_, temp in zip(dates, temp_max):
        plt.annotate(
            f"{temp:.1f}¬∞C",
            (date_, temp),
            textcoords="offset points",
            xytext=(0, 10),
            ha="center",
            fontsize=9,
            color="red",
        )

    # –ê–Ω–Ω–æ—Ç–∞—Ü–∏–∏ –¥–ª—è –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
    for date_, temp in zip(dates, temp_min):
        plt.annotate(
            f"{temp:.1f}¬∞C",
            (date_, temp),
            textcoords="offset points",
            xytext=(0, -15),
            ha="center",
            fontsize=9,
            color="blue",
        )

    # –ó–∞–ª–∏–≤–∫–∞ –º–µ–∂–¥—É –≥—Ä–∞—Ñ–∏–∫–∞–º–∏
    plt.fill_between(dates, temp_min, temp_max, color="lightgray", alpha=0.3, label="–†–∞–∑–Ω–∏—Ü–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä")

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–µ–≥–µ–Ω–¥—ã
    plt.legend(
        handles=[max_line, min_line],
        loc="upper left",
        framealpha=1,
        shadow=True,
        fontsize=10,
    )

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Å–µ–π –∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞
    plt.title(f"–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤ {city.capitalize()} –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π", fontsize=14, pad=20)
    plt.xlabel("–î–∞—Ç–∞", fontsize=12)
    plt.ylabel("–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ (¬∞C)", fontsize=12)
    plt.grid(True, linestyle="--", alpha=0.7)

    # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç
    plt.gca().xaxis.set_major_formatter(mdates.DateFormatter("%d.%m"))
    plt.gca().xaxis.set_major_locator(mdates.DayLocator())
    plt.gcf().autofmt_xdate()

    plt.tight_layout()
    plt.show()


def main():
    print("üå¶Ô∏è –ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø–æ–≥–æ–¥—ã (Open-Meteo)")
    print("-------------------------------------------")

    city = input("–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ (Enter –¥–ª—è –£—Ñ—ã): ").strip()
    if city == "":
        city = "–£—Ñ–∞"
    date_str = input("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î (Enter –¥–ª—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 7 –¥–Ω–µ–π): ").strip()

    latitude, longitude = get_coordinates(city)

    if date_str:
        # –ü–æ–≥–æ–¥–∞ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –¥–∞—Ç—É
        try:
            target_date = datetime.strptime(date_str, "%Y-%m-%d").date()
            data = fetch_weather_data(latitude, longitude, date_str, date_str)
            print(f"–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≥–æ—Ä–æ–¥–∞ {city}: {latitude}, {longitude}")

            if "daily" in data:
                temp_max = data["daily"]["temperature_2m_max"][0]
                temp_min = data["daily"]["temperature_2m_min"][0]
                print(f"\nüìÖ –ü–æ–≥–æ–¥–∞ –≤ {city.capitalize()} –Ω–∞ {date_str}:")
                print(f"üî• –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp_max}¬∞C")
                print(f"‚ùÑÔ∏è –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp_min}¬∞C")
            else:
                print("–û—à–∏–±–∫–∞: –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —ç—Ç—É –¥–∞—Ç—É.")
        except ValueError:
            print("‚ö† –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã!")
    else:
        # –ü–æ–≥–æ–¥–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
        end_date = date.today() - timedelta(days=1)
        start_date = end_date - timedelta(days=7)
        data = fetch_weather_data(latitude, longitude, start_date.strftime("%Y-%m-%d"), end_date.strftime("%Y-%m-%d"))

        if "daily" in data:
            plot_weather(data, city)
        else:
            print("–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ.")


if __name__ == "__main__":
    main()